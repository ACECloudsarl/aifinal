// prisma/schema.prisma
datasource db {
  provider = "mongodb"
  url      = "mongodb+srv://admin:SiMoX1234@cluster0.j8fvx.mongodb.net/chatwithai?retryWrites=true&w=majority&appName=Cluster0"
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?      @unique
  emailVerified DateTime?
  password      String?
  image         String?
  plan          String       @default("free")
  role          String       @default("user")
  voiceSettings UserVoiceSettings?
  accounts      Account[]
  sessions      Session[]
  chats         Chat[]
  createdAt     DateTime     @default(now())
  updatedAt     DateTime     @updatedAt
}

model UserVoiceSettings {
  id                 String   @id @default(auto()) @map("_id") @db.ObjectId
  userId             String   @unique @db.ObjectId
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  autoTTS            Boolean  @default(false)
  preferredVoiceId   String?  @db.ObjectId
  preferredVoice     Voice?   @relation(fields: [preferredVoiceId], references: [id])
  speakingRate       Float    @default(1.0)
  speakingPitch      Float    @default(1.0)
  inputDetectLanguage Boolean @default(true)
  preferredLanguage  String   @default("en") // Default language code
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model Voice {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  externalId  String?  // ID from external service like ElevenLabs
  description String
  gender      String?
  accent      String?
  age         String?
  previewText String?
  languages   String[] // Array of supported languages
  preview     String?  // URL to audio preview
  flag        String?  // emoji flag for UI
  isActive    Boolean @default(true)
  userSettings UserVoiceSettings[]
  bots        Bot[]    // Bots that use this voice
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Bot {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  description String
  avatar      String
  model       String   @default("meta-llama/Llama-3.3-70B-Instruct-Turbo-Free")
  category    String
  chats       Chat[]
  prompt      String   @default("You are a helpful AI assistant.")
  voiceId     String?  @db.ObjectId // Reference to Voice model
  voice       Voice?   @relation(fields: [voiceId], references: [id])
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Chat {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  title     String
  userId    String    @db.ObjectId
  user      User      @relation(fields: [userId], references: [id])
  botId     String    @db.ObjectId
  bot       Bot       @relation(fields: [botId], references: [id])
  messages  Message[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Message {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  content   String
  role      String   // user, assistant
  chatId    String   @db.ObjectId
  chat      Chat     @relation(fields: [chatId], references: [id])
  tokens    Int?
  metadata  Json?    // For storing image data and voice data
  createdAt DateTime @default(now())
}